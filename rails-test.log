Emptying /Users/lgilliam/repo/cmr/test/reports
Started with run options --seed 22749

MdqCuratorTest::mdq_enabled feature toggle - true::Access to daac records in arc_mode
Capybara starting Puma...
* Version 3.12.6 , codename: Llamas in Pajamas
* Min threads: 0, max threads: 4
* Listening on tcp://127.0.0.1:64939
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see the arc records in daac review section.png
  test_0001_can see the arc records in daac review section       [31m FAIL[0m (7.70s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/mdq_curator_test.rb:69:in `block (4 levels) in <class:MdqCuratorTest>'
        test/features/mdq_curator_test.rb:68:in `block (3 levels) in <class:MdqCuratorTest>'


UpdateDiscussionTest::update discussion.
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_add discussion and then update, delete.png
  test_0001_add discussion and then update, delete               [31mERROR[0m (3.27s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/update_discussion_test.rb:23:in `block (3 levels) in <class:UpdateDiscussionTest>'
            test/features/update_discussion_test.rb:22:in `block (2 levels) in <class:UpdateDiscussionTest>'


ReportsControllerTest::GET #selection
I, [2021-05-05T18:57:40.866472 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:40.866528 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_gets selection csv without error                     [31mERROR[0m (0.05s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/reports_controller_test.rb:72:in `block (2 levels) in <class:ReportsControllerTest>'


GranulesControllerTest::DELETE #replace
I, [2021-05-05T18:57:40.985106 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:40.985149 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_will delete and replace the granule                  [31mERROR[0m (0.12s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:155:in `block (2 levels) in <class:GranulesControllerTest>'

I, [2021-05-05T18:57:41.022620 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/4?client_id=clientid
I, [2021-05-05T18:57:41.022665 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_prevents DAAC curators from replacing the Granule    [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/4?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/4?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/4?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:119:in `block (2 levels) in <class:GranulesControllerTest>'


ReportsControllerTest::GET #search
I, [2021-05-05T18:57:41.055721 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:41.055785 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_it returns modis results                             [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.json?keyword=?*modis?*&page_num=1&page_size=2000&provider=OB_DAAC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/reports_controller_test.rb:29:in `block (2 levels) in <class:ReportsControllerTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is a daac Curator, part 1
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_can see unfiltered records.png
  test_0002_can see unfiltered records                           [31m FAIL[0m (3.98s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:135:in `block (3 levels) in <class:CanShowCollectionsTest>'

  test_0001_has the expected campaigns in the filter box         [32m PASS[0m (0.46s)

RecordTest::released_to_daac_date
  test_0001_updates the record's released_to_daac_date when releasing[32m PASS[0m (0.01s)
  test_0002_removes the record's released_to_daac_date when reverting[32m PASS[0m (0.01s)

UpdateReviewCommentTest::Show ingested iso record.
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_Navigate to show iso mends field mapping.png
  test_0001_Navigate to show iso mends field mapping             [31mERROR[0m (3.30s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='42']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[3]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/can_show_associated_iso_fields_test.rb:18:in `block (2 levels) in <class:UpdateReviewCommentTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_Navigate to show iso smap field mapping.png
  test_0002_Navigate to show iso smap field mapping              [31mERROR[0m (3.25s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='43']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[3]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/can_show_associated_iso_fields_test.rb:26:in `block (2 levels) in <class:UpdateReviewCommentTest>'


ReportsControllerTest::GET #home
I, [2021-05-05T18:57:52.076443 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.076476 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_gets home csv without error                          [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.echo10?page_size=1&provider=ARCTEST").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/reports_controller_test.rb:46:in `block (2 levels) in <class:ReportsControllerTest>'


UserTest::DAAC curator role
  test_0002_can see the e-mail preferences page                  [32m PASS[0m (0.01s)
  test_0001_is invalid without an associated DAAC                [32m PASS[0m (0.02s)

RecordsControllerTest::POST #complete
I, [2021-05-05T18:57:52.179849 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.179918 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0005_roundtrip release to daac both a collection and assoc granule record and then revert it[31mERROR[0m (0.07s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:130:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.206444 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.206479 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_will set an error when record cannot move to the next stage[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:90:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.235143 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:57:52.235191 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0008_will not flag second opinions until it hits ready for daac review state.[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:175:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.264378 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:57:52.264449 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0009_will moves the granule review state forward along with the collection view[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:194:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.296030 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.296068 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0004_associates a granule to a collection                 [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:118:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.325692 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:57:52.325731 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0007_marks complete while checking BOTH the collection review AND the associated granule review.[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:163:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.357647 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.357691 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0006_roundtrip release to daac just a collection record with no assoc granule record and then revert it[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:148:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.387309 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:57:52.387349 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_will set an error when the user does not have permission to advance the record[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:76:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:57:52.419062 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.419103 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0003_will send the user to the collection's page when successful[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:104:in `block (2 levels) in <class:RecordsControllerTest>'


GranulesControllerTest::POST #ingest_specific
I, [2021-05-05T18:57:52.446095 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.446130 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_can ingest a specifc granule review found in CMR and test that you cannot import the granule again (duplicate)[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G226251-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:195:in `block (2 levels) in <class:GranulesControllerTest>'

I, [2021-05-05T18:57:52.476991 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.477037 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_can ingest a specifc granule review not found in CMR [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=somegranule").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:177:in `block (2 levels) in <class:GranulesControllerTest>'

I, [2021-05-05T18:57:52.507475 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.507514 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0003_prevents ingested a specific granule not belong to the collection.[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G226250-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:216:in `block (2 levels) in <class:GranulesControllerTest>'


CollectionsControllerTest::POST #create
I, [2021-05-05T18:57:52.543675 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.543764 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_downloads and saves a new iso record as umm-json     [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "/.*granules.*C1599780765-NSIDC_ECS.*/").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "/.*granules.echo10\?concept_id=G.*/").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm_json?concept_id=C1599780765-NSIDC_ECS").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.atom?concept_id=C1599780765-NSIDC_ECS").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/collections_controller_test.rb:224:in `block (2 levels) in <class:CollectionsControllerTest>'

I, [2021-05-05T18:57:52.579673 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:57:52.579709 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_downloads and saves a new record                     [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "/.*granules.echo10\?concept_id=G.*/").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "/.*granules.*C222702-GHRC.*/").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.atom?concept_id=C222702-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "/https:\/\/cmr\.sit\.earthdata\.nasa\.gov\/search\/collections\.(echo10|native)\?concept_id\=C222702\-GHRC/").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/collections_controller_test.rb:135:in `block (2 levels) in <class:CollectionsControllerTest>'


DaacCuratorMailerTest::finding all the users and records to send digest e-mails::when users with different preferences are processed
  test_0001_sends one email to one recipient on a Tuesday        [32m PASS[0m (0.11s)
  test_0004_sends one email to three recipients on the third Monday[32m PASS[0m (0.04s)
  test_0002_sends one email to four recipients on the first Monday[32m PASS[0m (0.05s)
  test_0003_sends one email to two recipients on the second Monday[32m PASS[0m (0.04s)

CanShowCollectionsTest::when the user is a daac Curator, part 2::when the user filters some records::when the user removes the filter
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see unfiltered records.png
  test_0001_can see unfiltered records                           [31m FAIL[0m (4.70s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:210:in `block (4 levels) in <class:CanShowCollectionsTest>'


AssociatingGranulesTest::mark as undefined
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can mark a granule back to undefined.png
  test_0001_can mark a granule back to undefined                 [31mERROR[0m (3.21s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/associating_granules_test.rb:87:in `block (3 levels) in <class:AssociatingGranulesTest>'
            test/features/associating_granules_test.rb:86:in `block (2 levels) in <class:AssociatingGranulesTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is a daac Curator, part 1::when the user filters some records::when the user removes the filter
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see unfiltered records.png
  test_0001_can see unfiltered records                           [31m FAIL[0m (4.72s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:159:in `block (5 levels) in <class:CanShowCollectionsTest>'


CanShowCollectionsTest::when the user is a Daac Curator
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see link for editing mmt.png
  test_0001_can see link for editing mmt                         [31mERROR[0m (3.88s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/can_show_collections_test.rb:116:in `block (3 levels) in <class:CanShowCollectionsTest>'
            test/features/can_show_collections_test.rb:114:in `block (2 levels) in <class:CanShowCollectionsTest>'


CanShowCollectionsTest::Showing Collections::when the user is an Arc Curator
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0003_back button works when viewing granule review.png
  test_0003_back button works when viewing granule review        [31mERROR[0m (3.31s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='20']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[2]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/can_show_collections_test.rb:43:in `block (3 levels) in <class:CanShowCollectionsTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can show collection.png
  test_0001_can show collection                                  [31mERROR[0m (3.33s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='20']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[2]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/can_show_collections_test.rb:26:in `block (3 levels) in <class:CanShowCollectionsTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_back button works when viewing collection review.png
  test_0002_back button works when viewing collection review     [31mERROR[0m (3.20s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='20']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[2]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/can_show_collections_test.rb:33:in `block (3 levels) in <class:CanShowCollectionsTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0004_cannot see link for editing mmt.png
  test_0004_cannot see link for editing mmt                      [31mERROR[0m (3.23s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='1']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[3]/FORM[1]">
            test/features/can_show_collections_test.rb:56:in `block (4 levels) in <class:CanShowCollectionsTest>'
            test/features/can_show_collections_test.rb:54:in `block (3 levels) in <class:CanShowCollectionsTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is an MDQ Curator
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_can see unfiltered records.png
  test_0002_can see unfiltered records                           [31m FAIL[0m (3.43s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:85:in `block (3 levels) in <class:CanShowCollectionsTest>'

  test_0001_has the expected campaigns in the filter box         [32m PASS[0m (0.46s)

MetricSetTest::color counts
  test_0001_checks for color counts of record sets               [32m PASS[0m (0.01s)

CanShowCollectionsTest::Campaign Filtering::when the user is an MDQ Curator::when the user filters some records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see filtered records.png
  test_0001_can see filtered records                             [31m FAIL[0m (3.81s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:100:in `block (4 levels) in <class:CanShowCollectionsTest>'


GranulesControllerTest::POST #pull_latest
I, [2021-05-05T18:58:30.156928 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:58:30.156966 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_pulls in the latest revision of a granule for a collection.[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G309210-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:96:in `block (2 levels) in <class:GranulesControllerTest>'


CopyRecommendationsTest::copying recommendations.
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0004_copies recommendations from a concept id and revision id..png
  test_0004_copies recommendations from a concept id and revision id.[31mERROR[0m (3.25s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/copy_recommendations_test.rb:78:in `block (3 levels) in <class:CopyRecommendationsTest>'
            test/features/copy_recommendations_test.rb:77:in `block (2 levels) in <class:CopyRecommendationsTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0003_verifies the revision id text field and the concept id text field are empty if there is no prior revision.png
  test_0003_verifies the revision id text field and the concept id text field are empty if there is no prior revision[31mERROR[0m (3.28s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/copy_recommendations_test.rb:61:in `block (3 levels) in <class:CopyRecommendationsTest>'
            test/features/copy_recommendations_test.rb:60:in `block (2 levels) in <class:CopyRecommendationsTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_copies recommendations from a prior revision..png
  test_0001_copies recommendations from a prior revision.        [31mERROR[0m (3.18s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/copy_recommendations_test.rb:27:in `block (3 levels) in <class:CopyRecommendationsTest>'
            test/features/copy_recommendations_test.rb:26:in `block (2 levels) in <class:CopyRecommendationsTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_prevents user from pressing the copy recommendations button twice..png
  test_0002_prevents user from pressing the copy recommendations button twice.[31mERROR[0m (3.35s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/copy_recommendations_test.rb:44:in `block (3 levels) in <class:CopyRecommendationsTest>'
            test/features/copy_recommendations_test.rb:43:in `block (2 levels) in <class:CopyRecommendationsTest>'


PerformsSanityChecksOnReviewsTest::viewing the granule review, the buttons "Mark Complete","Release to DAAC", "CMR Updated" etc. are no longer present.
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_verify correct buttons appear.png
  test_0001_verify correct buttons appear                        [31mERROR[0m (3.22s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='1']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[3]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/perform_sanity_checks_on_reviews_test.rb:159:in `block (2 levels) in <class:PerformsSanityChecksOnReviewsTest>'


RecordTest::attribute accessor methods
  test_0001_returns correct attribute information for a record   [32m PASS[0m (0.03s)

LoginControllerTest::POST #urs::#urs callback
I, [2021-05-05T18:58:46.613468 #65025]  INFO -- request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser
I, [2021-05-05T18:58:46.613511 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_should successfully create a user                    [31mERROR[0m (0.14s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/normaluser?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/acl_dao.rb:92:in `send_request_to_cmr'
            app/models/acl_dao.rb:73:in `search_acls_by_user'
            app/models/acl_dao.rb:16:in `get_role_and_daac'
            app/models/cmr.rb:712:in `get_role_and_daac'
            app/models/user.rb:31:in `from_omniauth'
            app/controllers/login_controller.rb:6:in `urs'
            test/controllers/login_controller_test.rb:45:in `block (3 levels) in <class:LoginControllerTest>'


GranulesControllerTest::POST #create
I, [2021-05-05T18:58:46.648282 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:58:46.648322 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_creates a new random granule for a collection        [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G1581545525-LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=C1000000020-LANCEAMSR2&page_num=1&page_size=10").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:65:in `block (2 levels) in <class:GranulesControllerTest>'


CanShowCollectionsTest::when the user is a daac Curator, part 2::when the user filters some records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see filtered records.png
  test_0001_can see filtered records                             [31m FAIL[0m (4.74s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:198:in `block (3 levels) in <class:CanShowCollectionsTest>'


CollectionsControllerTest::GET #show
  test_0002_redirects when no concept id is provided             [32m PASS[0m (0.01s)
I, [2021-05-05T18:58:51.429304 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:58:51.429353 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0004_detects if a granule is no longer in cmr             [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G309210-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.echo10?concept_id=C1000000020-LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/collections_controller_test.rb:87:in `block (2 levels) in <class:CollectionsControllerTest>'

I, [2021-05-05T18:58:51.460375 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:58:51.460418 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_loads the correct collection on show                 [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G309210-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.echo10?concept_id=C1000000020-LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/collections_controller_test.rb:52:in `block (2 levels) in <class:CollectionsControllerTest>'

  test_0003_redirects when no collection is found                [32m PASS[0m (0.01s)
I, [2021-05-05T18:58:51.498388 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:58:51.498431 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0005_detects if a new granule revision is available       [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/granules.echo10?concept_id=G309210-GHRC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.echo10?concept_id=C1000000020-LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/collections_controller_test.rb:109:in `block (2 levels) in <class:CollectionsControllerTest>'


UserTest::saving user email preferences
  test_0001_can save user email preferences                      [32m PASS[0m (0.01s)

CmrTest::get_collections
  test_0005_correctly adds in the dependent fields               [32m PASS[0m (0.04s)
  test_0003_raises error when concept_id is not found            [32m PASS[0m (0.02s)
  test_0002_raises error when concept_id invalid                 [32m PASS[0m (0.02s)
  test_0001_correctly gets collection from CMR api               [32m PASS[0m (0.03s)
  test_0004_correctly flattens results from collection           [32m PASS[0m (0.03s)

CmrTest::collections_updated_since
  test_0001_pulls xml response from cmr and returns hash         [32m PASS[0m (0.02s)

InvalidKeywordTest::test creating invalid keywords and removing all invalid keywords by provider
  test_0001_create an invalid keyword                            [32m PASS[0m (0.03s)

CanShowCollectionsTest::Campaign Filtering::when the user is an Arc Curator
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_can see unfiltered records.png
  test_0002_can see unfiltered records                           [31m FAIL[0m (3.27s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:28:in `block (3 levels) in <class:CanShowCollectionsTest>'

  test_0001_has the expected campaigns in the filter box         [32m PASS[0m (0.49s)

ReviewTest::formatted_date
  test_0001_correctly formats the date before and after review completion[32m PASS[0m (0.03s)

UserTest::check active for authentication
I, [2021-05-05T18:58:55.508135 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid
I, [2021-05-05T18:58:55.508178 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_the account is active                                [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            test/models/user_test.rb:49:in `block (2 levels) in <class:UserTest>'

I, [2021-05-05T18:58:55.534468 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid
I, [2021-05-05T18:58:55.534514 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_the account is inactive                              [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/2?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            test/models/user_test.rb:73:in `block (2 levels) in <class:UserTest>'


RecordTest::test remove_quotes_from_all_values
  test_0001_successfully removes quotes in 3+ levels deep.       [32m PASS[0m (0.01s)

MdqCuratorTest::mdq_enabled feature toggle - true::Access to mdq records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see the mdq records.png
  test_0001_can see the mdq records                              [31m FAIL[0m (3.48s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/mdq_curator_test.rb:28:in `block (4 levels) in <class:MdqCuratorTest>'
        test/features/mdq_curator_test.rb:26:in `block (3 levels) in <class:MdqCuratorTest>'


RecordTest::bubble_map
  test_0001_returns correct bubble map                           [31mERROR[0m (0.30s)
Minitest::UnexpectedError:         Errors::PythonError: Python error occurred (Collection A2_DySno_NRT 0)
            app/models/record_formats/echo10_record.rb:112:in `evaluate_script'
            app/models/record_formats/echo10_record.rb:61:in `create_script'
            test/models/record_test.rb:57:in `block (2 levels) in <class:RecordTest>'


CanShowCollectionsTest::when the user is an Admin
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_cannot see link for editing mmt.png
  test_0001_cannot see link for editing mmt                      [31mERROR[0m (3.30s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='1']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[3]/FORM[1]">
            test/features/can_show_collections_test.rb:87:in `block (3 levels) in <class:CanShowCollectionsTest>'
            test/features/can_show_collections_test.rb:85:in `block (2 levels) in <class:CanShowCollectionsTest>'


AclDaoTest::test acls
I, [2021-05-05T18:59:02.648362 #65025]  INFO -- request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser
I, [2021-05-05T18:59:02.648405 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_tests retrieving role as arc_curator                 [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/acl_dao.rb:92:in `send_request_to_cmr'
            app/models/acl_dao.rb:73:in `search_acls_by_user'
            app/models/acl_dao.rb:16:in `get_role_and_daac'
            test/models/acl_dao_test.rb:43:in `block (2 levels) in <class:AclDaoTest>'

I, [2021-05-05T18:59:02.667285 #65025]  INFO -- request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=existingdeviseuser
I, [2021-05-05T18:59:02.667323 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_tests retrieving role as admin                       [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=existingdeviseuser with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=existingdeviseuser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=existingdeviseuser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/acl_dao.rb:92:in `send_request_to_cmr'
            app/models/acl_dao.rb:73:in `search_acls_by_user'
            app/models/acl_dao.rb:16:in `get_role_and_daac'
            test/models/acl_dao_test.rb:26:in `block (2 levels) in <class:AclDaoTest>'

I, [2021-05-05T18:59:02.685806 #65025]  INFO -- request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser
I, [2021-05-05T18:59:02.685838 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0003_tests retrieving acls as daac curator                [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls?page_num=1&page_size=2000&permitted_user=normaluser").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/access-control/acls/ACL1200303063-CMR").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/acl_dao.rb:92:in `send_request_to_cmr'
            app/models/acl_dao.rb:73:in `search_acls_by_user'
            app/models/acl_dao.rb:16:in `get_role_and_daac'
            test/models/acl_dao_test.rb:70:in `block (2 levels) in <class:AclDaoTest>'


CollectionsControllerTest::GET #search
I, [2021-05-05T18:59:02.714032 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:02.714074 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_it returns modis results                             [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.echo10?keyword=*modis*&page_num=1&page_size=10&provider=LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/collections_controller_test.rb:27:in `block (2 levels) in <class:CollectionsControllerTest>'


CanRevertRecordTest::Reverting Collections
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can revert a record, mimics workflow in issue CMRARC-484.png
  test_0001_can revert a record, mimics workflow in issue CMRARC-484[31mERROR[0m (3.28s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/can_revert_record_test.rb:25:in `block (3 levels) in <class:CanRevertRecordTest>'
            test/features/can_revert_record_test.rb:24:in `block (2 levels) in <class:CanRevertRecordTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is an Arc Curator::when the user filters some records::when the user removes the filter
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see unfiltered records.png
  test_0001_can see unfiltered records                           [31m FAIL[0m (3.95s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:58:in `block (5 levels) in <class:CanShowCollectionsTest>'


MdqCuratorTest::mdq_enabled feature toggle - false::Access to mdq records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see the mdq records and arc records.png
  test_0001_can see the mdq records and arc records              [31m FAIL[0m (3.38s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/mdq_curator_test.rb:96:in `block (4 levels) in <class:MdqCuratorTest>'
        test/features/mdq_curator_test.rb:95:in `block (3 levels) in <class:MdqCuratorTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is a daac Curator, part 1::when the user filters some records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see filtered records.png
  test_0001_can see filtered records                             [31m FAIL[0m (4.29s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:147:in `block (4 levels) in <class:CanShowCollectionsTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is an MDQ Curator::when the user filters some records::when the user removes the filter
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see unfiltered records.png
  test_0001_can see unfiltered records                           [31m FAIL[0m (3.97s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:112:in `block (5 levels) in <class:CanShowCollectionsTest>'


InvalidKeywordTest
  test_0001_remove invalid keywords by provider                  [32m PASS[0m (0.01s)
  test_0002_remove invalid keywords by concept ids               [32m PASS[0m (0.01s)

RecordsControllerTest::POST #revert 
I, [2021-05-05T18:59:21.644719 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:21.644751 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_can reopen a closed record                           [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:230:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:21.673410 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:21.673454 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_reverting a record not 'in daac review' or 'closed' results in no change[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:241:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:21.705669 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:21.705710 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0004_can revert a record from in daac review back to ready for daac review[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:268:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:21.746228 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:21.746269 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0003_revert both collection and assoc granule record      [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:253:in `block (2 levels) in <class:RecordsControllerTest>'


RecordTest::script_values && script_score
  test_0001_adds script results and can return them on command   [31mERROR[0m (0.25s)
Minitest::UnexpectedError:         Errors::PythonError: Python error occurred (Collection A2_DySno_NRT 0)
            app/models/record_formats/echo10_record.rb:112:in `evaluate_script'
            app/models/record_formats/echo10_record.rb:61:in `create_script'
            test/models/record_test.rb:44:in `block (2 levels) in <class:RecordTest>'


DaacCuratorMailerTest::released_records_digest_notification email appearance
  test_0001_correctly populates the fields of an email           [32m PASS[0m (0.04s)

ControlledElementsTest::controlled elements tests
  test_0004_can return proper description given specified field for umm-g json[32m PASS[0m (0.02s)
  test_0001_can return proper description given specified field for umm_json[32m PASS[0m (0.01s)
  test_0002_can return proper description given specified field for dif10[32m PASS[0m (0.01s)
  test_0003_can return proper description given specified field for echo10[32m PASS[0m (0.01s)

KmsTest::kms accessor test
  test_0002_get recommended keywords                             [31mERROR[0m (0.43s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: POST https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=platforms with body '{"Keywords":["AQUATEST","CLOUDTEST"]}' with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Content-Type'=>'application/json'}
        
        You can stub this request with the following snippet:
        
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=platforms").
          with(
            body: "{\"Keywords\":[\"AQUATEST\",\"CLOUDTEST\"]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=platforms").
          with(
            body: {"Keywords"=>["AQUATEST", "CLOUDTEST"]},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/GranuleDataFormat?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/ProductLevelId?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/providers?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/projects?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/instruments?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/platforms?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/sciencekeywords?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        
        ============================================================
            app/models/kms.rb:27:in `get_recommended_keywords'
            test/models/kms_test.rb:79:in `block (2 levels) in <class:KmsTest>'

  test_0001_download keywords in all schemes                     [32m PASS[0m (0.24s)
  test_0003_get kms base url                                     [32m PASS[0m (0.24s)
  test_0004_get kms url for science keywords                     [32m PASS[0m (0.23s)

InvalidKeywordsControllerTest::GET #invalid_keywords
  test_0001_produces csv report for all providers                [32m PASS[0m (0.02s)
  test_0002_produces csv report for specified provider           [32m PASS[0m (0.01s)

AssociatingGranulesTest::perform checks associating granule to collection
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_checks has reviewers, all colors, and no second opinions.png
  test_0001_checks has reviewers, all colors, and no second opinions[31mERROR[0m (3.30s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='12']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[5]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/associating_granules_test.rb:107:in `block (2 levels) in <class:AssociatingGranulesTest>'


RecordTest::parsing collection urls
  test_0001_returns concept id, revision id, and format          [32m PASS[0m (0.00s)

ReportsControllerTest::GET #provider
I, [2021-05-05T18:59:26.574600 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:26.574635 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_gets provider csv without error                      [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.echo10?page_size=1&provider=PODAAC").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/reports_controller_test.rb:60:in `block (2 levels) in <class:ReportsControllerTest>'


CanAccessTopPageTest::POST #urs::access top page
  test_0005_can sign in user with oauth account with daac curator privileges[32m PASS[0m (1.01s)
  test_0001_can maps an EDL user to Devise user                  [32m PASS[0m (0.84s)
  test_0004_can sign in user with oauth account with arc curator privileges[32m PASS[0m (1.08s)
  test_0007_can handle authentication error                      [32m PASS[0m (0.71s)
  test_0002_can create a new user from an existing EDL user      [32m PASS[0m (0.88s)
  test_0006_it contains the invalid keywords report icon         [32m PASS[0m (1.27s)
  test_0003_can sign in user with oauth account with admin privileges[32m PASS[0m (1.25s)

AssociatingGranulesTest::Granule Assocations::associated granule reports
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_associated granule shows up in reports.png
  test_0001_associated granule shows up in reports               [31mERROR[0m (3.28s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/associating_granules_test.rb:58:in `block (4 levels) in <class:AssociatingGranulesTest>'
            test/features/associating_granules_test.rb:57:in `block (3 levels) in <class:AssociatingGranulesTest>'


CanShowCollectionsTest::when the user is a daac Curator, part 2
  test_0001_has the expected campaigns in the filter box         [32m PASS[0m (0.50s)
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_can see unfiltered records.png
  test_0002_can see unfiltered records                           [31m FAIL[0m (4.11s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:186:in `block (2 levels) in <class:CanShowCollectionsTest>'


MdqCuratorTest::mdq_enabled feature toggle - true::Access to arc records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see the arc records.png
  test_0001_can see the arc records                              [31m FAIL[0m (3.19s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/mdq_curator_test.rb:41:in `block (4 levels) in <class:MdqCuratorTest>'
        test/features/mdq_curator_test.rb:40:in `block (3 levels) in <class:MdqCuratorTest>'


UserTest::ARC curator role
  test_0001_can see screen 'Awaiting Release to DAAC' but cannot release or delete a record[32m PASS[0m (0.00s)

RecordsControllerTest::POST #create
I, [2021-05-05T18:59:44.726667 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:44.726705 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_removes values when unselected                       [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:44:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:44.750725 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:44.750763 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_updates record data from review params               [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:16:in `block (2 levels) in <class:RecordsControllerTest>'


RecordTest::evaluate_script
  test_0001_returns results of the automated collection_script   [31mERROR[0m (0.24s)
Minitest::UnexpectedError:         Errors::PythonError: Python error occurred (Collection A2_DySno_NRT 0)
            app/models/record_formats/echo10_record.rb:112:in `evaluate_script'
            test/models/record_test.rb:165:in `block (2 levels) in <class:RecordTest>'

  test_0002_returns results of the automated granule_script      [31mERROR[0m (0.17s)
Minitest::UnexpectedError:         Errors::PythonError: Python error occurred (Granule )
            app/models/record_formats/echo10_record.rb:112:in `evaluate_script'
            test/models/record_test.rb:178:in `block (2 levels) in <class:RecordTest>'


CuratorFeedbackTest::Curator Feedback with no feedback fields
  test_0001_verifies no records in Requires Reviewer Feedback Records section.[32m PASS[0m (0.45s)
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_only daac curators can click the curator feedback button.png
  test_0002_only daac curators can click the curator feedback button[31mERROR[0m (3.24s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/curator_feedback_test.rb:33:in `block (3 levels) in <class:CuratorFeedbackTest>'
            test/features/curator_feedback_test.rb:32:in `block (2 levels) in <class:CuratorFeedbackTest>'


CmrSyncTest::can read/write since data from cmr_sync table
I, [2021-05-05T18:59:48.870445 #65025]  INFO -- request: GET https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=30&provider=LARC&updated_since=1971-01-01T12%3A00%3A00Z
I, [2021-05-05T18:59:48.870491 #65025]  INFO -- request: User-Agent: "Faraday v1.4.1"
  test_0003_returns all concept_id, revision_id, short_name, version for a given provider from CMR api[31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=30&provider=LARC&updated_since=1971-01-01T12:00:00Z with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=30&provider=LARC&updated_since=1971-01-01T12:00:00Z").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=2&page_size=30&provider=LARC&updated_since=1971-01-01T12:00:00Z").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=30&provider=LARC&updated_since=1971-01-01T12:00:00Z").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        
        ============================================================
            app/models/cmr_sync.rb:55:in `get_concepts'
            test/models/cmr_sync_test.rb:35:in `block (2 levels) in <class:CmrSyncTest>'

  test_0005_returns umm-json collection without revision id from CMR api[32m PASS[0m (0.02s)
  test_0001_can read sync date                                   [32m PASS[0m (0.01s)
  test_0002_can write sync date                                  [32m PASS[0m (0.01s)
  test_0004_returns umm-json collection with revision id from CMR api[32m PASS[0m (0.02s)

GranulesControllerTest::DELETE #delete
I, [2021-05-05T18:59:48.970059 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:48.970098 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_deletes a selected granule record from a collection  [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/granules_controller_test.rb:24:in `block (2 levels) in <class:GranulesControllerTest>'


CmrTest::collection_search
  test_0001_gets free text results from CMR                      [32m PASS[0m (0.15s)

CmrTest::total_collection_count
  test_0001_get the total number of collections from CMR         [32m PASS[0m (0.02s)

EmailPreferenceTest::Accessing and updating e-mail preference
  test_0001_a daac curator can see and access the e-mail preferences page[32m PASS[0m (0.96s)
  test_0002_a daac curator can save a preference                 [32m PASS[0m (1.11s)

DaacCuratorMailerTest::finding all the users and records to send digest e-mails::when two different daacs need e-mails
  test_0001_sends two e-mails when two DAACs have records in review[32m PASS[0m (0.09s)

RecordTest::daac scope
  test_0001_will return records for the given DAAC               [32m PASS[0m (0.01s)
  test_0002_will not return records that belong to anoter DAAC   [32m PASS[0m (0.01s)

CmrTest::collection_granule_count
  test_0001_gets number of associated granules                   [32m PASS[0m (0.08s)

RecordsControllerTest::post#hide
I, [2021-05-05T18:59:51.430179 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:59:51.430217 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0004_it properly undeletes multiple records               [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:367:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:51.454176 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:59:51.454211 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_it deletes a single record                           [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:333:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:51.485169 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:51.485207 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0002_it properly undeletes a single record                [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            test/controllers/records_controller_test.rb:344:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:51.511553 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid
I, [2021-05-05T18:59:51.511598 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0003_it deletes multiple records                          [31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/3?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:356:in `block (2 levels) in <class:RecordsControllerTest>'

I, [2021-05-05T18:59:51.542238 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T18:59:51.542279 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0005_ensure associate granule record not hidden, see CMRARC-586[31mERROR[0m (0.03s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:382:in `block (2 levels) in <class:RecordsControllerTest>'


RecordTest::close
  test_0001_closes a record and sets the closed at date          [32m PASS[0m (0.02s)

CuratorFeedbackTest::Curator Feedback with a field requesting feedback
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_verifies the record shows up in Requires Reviewer Feedback Records section for the daac curator..png
  test_0001_verifies the record shows up in Requires Reviewer Feedback Records section for the daac curator.[31mERROR[0m (3.95s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/curator_feedback_test.rb:64:in `block (3 levels) in <class:CuratorFeedbackTest>'
            test/features/curator_feedback_test.rb:63:in `block (2 levels) in <class:CuratorFeedbackTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_curator feedback shows up for arc curator.png
  test_0002_curator feedback shows up for arc curator            [31mERROR[0m (4.14s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/curator_feedback_test.rb:64:in `block (3 levels) in <class:CuratorFeedbackTest>'
            test/features/curator_feedback_test.rb:63:in `block (2 levels) in <class:CuratorFeedbackTest>'


AssociatingGranulesTest::Granule Assocations::associate granules to collections
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0002_can assign "no granule review" to a collection.png
  test_0002_can assign "no granule review" to a collection       [31mERROR[0m (3.33s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/associating_granules_test.rb:40:in `block (4 levels) in <class:AssociatingGranulesTest>'
            test/features/associating_granules_test.rb:39:in `block (3 levels) in <class:AssociatingGranulesTest>'

[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can assign granule to collection.png
  test_0001_can assign granule to collection                     [31mERROR[0m (3.24s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/associating_granules_test.rb:25:in `block (4 levels) in <class:AssociatingGranulesTest>'
            test/features/associating_granules_test.rb:24:in `block (3 levels) in <class:AssociatingGranulesTest>'


MdqCuratorTest::mdq_enabled feature toggle - true::Access to daac records in mdq_mode
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see the mdq records in daac review section.png
  test_0001_can see the mdq records in daac review section       [31m FAIL[0m (4.12s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/mdq_curator_test.rb:55:in `block (4 levels) in <class:MdqCuratorTest>'
        test/features/mdq_curator_test.rb:54:in `block (3 levels) in <class:MdqCuratorTest>'


RecordTest::color_coding_complete? && has_enough_reviews
  test_0001_catches incomplete record reviews                    [32m PASS[0m (0.09s)
  test_0002_accepts complete reviews                             [32m PASS[0m (0.10s)

KeywordCheckerTest::KeywordChecker test
  test_0002_get invalid keywords                                 [32m PASS[0m (0.23s)
  test_0001_get keywords from json                               [32m PASS[0m (0.23s)

PerformsSanityChecksOnReviewsTest::performs "mark complete" on a collection record and granule record::on granule record
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_checks to see if it produces error.png
  test_0001_checks to see if it produces error                   [31mERROR[0m (3.24s)
Minitest::UnexpectedError:         Capybara::ElementNotFound: Unable to find css "#record_id_[value='1']" within #<Capybara::Node::Element tag="form" path="/HTML/BODY[1]/DIV[3]/DIV[3]/DIV[3]/DIV[3]/FORM[1]">
            test/helpers/home_helper.rb:6:in `block in see_collection_review_details'
            test/helpers/home_helper.rb:5:in `see_collection_review_details'
            test/features/perform_sanity_checks_on_reviews_test.rb:28:in `block (2 levels) in <class:PerformsSanityChecksOnReviewsTest>'


ReviewTest::mark_complete
  test_0001_correctly marks a review as complete                 [32m PASS[0m (0.02s)

RecordsControllerTest::POST#refresh
I, [2021-05-05T19:00:14.306319 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T19:00:14.306365 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_refresh record with id # with new record from cmr    [31mERROR[0m (0.04s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm_json?concept_id=C1000000020-LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.atom?concept_id=C1000000020-LANCEAMSR2").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=2000&updated_since=1971-01-01T12:00:00-04:00").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/records_controller_test.rb:315:in `block (2 levels) in <class:RecordsControllerTest>'


KeywordValidatorTest::keyword validator test
I, [2021-05-05T19:00:14.641290 #65025]  INFO -- request: GET https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=2000&provider=SCIOPS&updated_since=1971-01-01T12%3A00%3A00Z
I, [2021-05-05T19:00:14.641344 #65025]  INFO -- request: User-Agent: "Faraday v1.4.1"
  test_0001_validate keyword                                     [31mERROR[0m (0.33s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=2000&provider=SCIOPS&updated_since=1971-01-01T12:00:00Z with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=2000&provider=SCIOPS&updated_since=1971-01-01T12:00:00Z").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=GranuleDataFormat").
          with(
            body: "{\"Keywords\":[]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=ProductLevelId").
          with(
            body: "{\"Keywords\":[]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=providers").
          with(
            body: "{\"Keywords\":[\"DOC/NTIS\",\"CL/INACH/CENDA\"]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=projects").
          with(
            body: "{\"Keywords\":[]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=instruments").
          with(
            body: "{\"Keywords\":[]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=platforms").
          with(
            body: "{\"Keywords\":[\"GROUND STATIONS\",\"METEOROLOGICAL STATIONS\",\"GROUND STATIONS\"]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:post, "https://gcmd.sit.earthdata.nasa.gov/kms/recommended_keywords/?includesFullPath=false&scheme=sciencekeywords").
          with(
            body: "{\"Keywords\":[\"EARTH SCIENCE|ATMOSPHERE|ATMOSPHERIC WATER VAPOR|EVAPORATION\",\"EARTH SCIENCE|BIOLOGICAL CLASSIFICATION|PLANTS|ALGAE; MORPHOLOGICAL STUDY\"]}",
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Content-Type'=>'application/json',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/concepts/C1200208767-SCIOPS/1.umm_json").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/concepts/C1200207458-SCIOPS/1.umm_json").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://cmr.sit.earthdata.nasa.gov/search/collections.umm-json?page_num=1&page_size=2000&provider=SCIOPS&updated_since=1971-01-01T12:00:00Z").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/GranuleDataFormat?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/ProductLevelId?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/providers?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/projects?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/instruments?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/platforms?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        stub_request(:get, "https://gcmd.sit.earthdata.nasa.gov/kms/concepts/concept_scheme/sciencekeywords?format=csv").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',

            })
        
        ============================================================
            app/models/cmr_sync.rb:55:in `get_concepts'
            app/models/keyword_validator.rb:20:in `block in validate_keywords'
            app/models/keyword_validator.rb:18:in `each'
            app/models/keyword_validator.rb:18:in `validate_keywords'
            test/models/keyword_validator_test.rb:146:in `block (2 levels) in <class:KeywordValidatorTest>'


CanShowCollectionsTest::Campaign Filtering::when the user is an Arc Curator::when the user filters some records
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_can see filtered records.png
  test_0001_can see filtered records                             [31m FAIL[0m (3.64s)
Minitest::Assertion:         Expected false to be truthy.
        test/features/campaign_filtering_test.rb:43:in `block (4 levels) in <class:CanShowCollectionsTest>'


UpdateReviewCommentTest::update review comment.
[Screenshot]: /Users/lgilliam/repo/cmr/tmp/screenshots/failures_test_0001_add review comments and then update, delete.png
  test_0001_add review comments and then update, delete          [31mERROR[0m (3.30s)
Minitest::UnexpectedError:         NoMethodError: undefined method `click' for nil:NilClass
            test/features/update_review_comment_test.rb:23:in `block (3 levels) in <class:UpdateReviewCommentTest>'
            test/features/update_review_comment_test.rb:22:in `block (2 levels) in <class:UpdateReviewCommentTest>'


ReportsControllerTest
I, [2021-05-05T19:00:21.609378 #65025]  INFO -- request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid
I, [2021-05-05T19:00:21.609411 #65025]  INFO -- request: Authorization: "Bearer accesstoken"
User-Agent: "Faraday v1.4.1"
  test_0001_can download csv review report                       [31mERROR[0m (0.02s)
Minitest::UnexpectedError:         WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled. Unregistered request: GET https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'Authorization'=>'Bearer accesstoken'}
        
        You can stub this request with the following snippet:
        
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',
        	  #
            }).
          to_return(status: 200, body: "", headers: {})
        
        registered request stubs:
        
        stub_request(:post, "https://sit.urs.earthdata.nasa.gov/oauth/token").
          with(
            body: {"grant_type"=>"refresh_token", "refresh_token"=>"refreshtoken"},
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Basic Y2xpZW50aWQ6Y2xpZW50c2VjcmV0',
        	  'Content-Type'=>'application/x-www-form-urlencoded',

            })
        stub_request(:get, "https://sit.urs.earthdata.nasa.gov/api/users/1?client_id=clientid").
          with(
            headers: {
        	  'Accept'=>'*/*',
        	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        	  'Authorization'=>'Bearer accesstoken',

            })
        
        ============================================================
            app/models/cmr.rb:753:in `get_user_info'
            app/models/user.rb:61:in `check_if_account_active'
            app/models/user.rb:56:in `active_for_authentication?'
            app/controllers/application_controller.rb:52:in `assign_user'
            test/controllers/reports_controller_test.rb:82:in `block in <class:ReportsControllerTest>'


Finished in 171.77759s
161 tests, 237 assertions, [31m17 failures, 78 errors, [0m[33m0 skips[0m
Writing XML reports to /Users/lgilliam/repo/cmr/test/reports
Coverage report generated for Minitest to /Users/lgilliam/repo/cmr/coverage. 1201 / 3102 LOC (38.72%) covered.
